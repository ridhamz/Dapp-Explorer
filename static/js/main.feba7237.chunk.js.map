{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","state","blocNumber","difficulty","gasPrice","latestBlock","web3","Web3","eth","getBlock","LatestBlock","this","setState","number","getGasPrice","latestblock","i","block","push","className","role","style","width","scope","map","key","hash","substring","miner","timestamp","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gdA2HeA,E,YArHb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACTC,WAAa,EACbC,WAAY,EACZC,SAAU,EACVC,YAAa,IAND,E,mNAYZC,EAAO,IAAIC,IAAK,iE,SAEID,EAAKE,IAAIC,SAAS,U,cAAtCC,E,OAEFC,KAAKC,SAAS,CACZV,WAAaQ,EAAYG,OACzBV,WAAaO,EAAYP,a,SAGNG,EAAKE,IAAIM,c,OAA1BV,E,OAEJO,KAAKC,SAAS,CAACR,SAASA,IAIpBW,EAAc,GACVC,EAAI,E,aAAGA,EAAG,I,kCACFV,EAAKE,IAAIC,SAASC,EAAYG,OAASG,G,QAArDC,E,OACAF,EAAYG,KAAKD,G,QAFGD,I,wBAKtBL,KAAKC,SAAS,CAACP,YAAcU,I,sIAG/B,OACE,6BACE,yBAAKI,UAAU,mEACf,yBAAKA,UAAU,aACb,8CAKF,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,OACb,0BAAMC,KAAK,OAAOD,UAAU,gCAC5B,yBAAKA,UAAU,2BAA2BE,MAAO,CAACC,MAAM,UACpD,4DACA,yBAAKH,UAAU,OACZ,yBAAKA,UAAU,SACX,yBAAKA,UAAU,0BACd,4CACE,2BAAIR,KAAKV,MAAMC,cAIjB,yBAAKiB,UAAU,SAChB,yBAAKA,UAAU,0BACd,0CACC,2BAAIR,KAAKV,MAAME,cAIhB,yBAAKgB,UAAU,SAChB,yBAAKA,UAAU,0BACd,yCACE,2BAAIR,KAAKV,MAAMG,aAKtB,yBAAKe,UAAU,OACf,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,QACf,yBAAKA,UAAU,eACd,iDAEE,yBAAKA,UAAU,aACd,2BAAOA,UAAU,SAChB,8BACA,gCACC,4BACC,wBAAII,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,cAGEZ,KAAKV,MAAMI,YAAYmB,KAAI,SAACP,EAAMQ,GAChC,OACE,wBAAIA,IAAKA,GACP,4BAAKR,EAAMJ,OAAX,KACC,4BAAKI,EAAMS,KAAKC,UAAU,EAAE,IAA5B,OACA,4BAAKV,EAAMW,MAAMD,UAAU,EAAE,IAA7B,OACA,4BAAKV,EAAMY,+B,GAlGhCC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.feba7237.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Web3 from 'web3';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n        blocNumber : 0,\r\n        difficulty :0,\r\n        gasPrice :0,\r\n        latestBlock :[]\r\n    }\r\n  }\r\n\r\n async componentWillMount(){\r\n   //load web3\r\n    let web3 = new Web3('https://mainnet.infura.io/v3/3a22e5709d134c38b3d7153b00c2b3ad');\r\n    //fetch latest block\r\n    let LatestBlock = await web3.eth.getBlock('latest');\r\n   // set the state\r\n      this.setState({\r\n        blocNumber : LatestBlock.number,\r\n        difficulty : LatestBlock.difficulty\r\n      })\r\n      //fetch the gas price \r\n      let gasPrice = await web3.eth.getGasPrice();\r\n      // set the state\r\n      this.setState({gasPrice:gasPrice})\r\n\r\n      //fetch latests 10 blocks \r\n      let block \r\n      let latestblock = []\r\n      for(let i = 0; i< 10; i++){\r\n        block = await web3.eth.getBlock(LatestBlock.number - i);\r\n        latestblock.push(block)\r\n      }\r\n      // set state\r\n      this.setState({latestBlock : latestblock})\r\n  }\r\n  render() {\r\n    return (\r\n      <div >\r\n        <nav className=\"navbar navbar-dark fixed-top bg-white flex-md-nowrap p-2 shadow\">\r\n        <div className=\"container\">\r\n          <a>\r\n            Dapp Explorer\r\n          </a>\r\n          </div>\r\n        </nav>\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n            <div className=\"content mr-auto ml-auto \" style={{width:'800px'}}>\r\n                <h5>Ethereum Blockchain Explorer</h5>\r\n                <div className=\"row\">\r\n                   <div className=\"col-4\">\r\n                       <div className=\"bg-light pt-4 pb-3 m-1\" >\r\n                        <h5>Latest Block</h5>\r\n                          <p>{this.state.blocNumber}</p>\r\n                         </div>\r\n                       </div>\r\n\r\n                        <div className=\"col-4\">\r\n                       <div className=\"bg-light pt-4 pb-3 m-1\" >\r\n                        <h5>Diffuculty</h5>\r\n                         <p>{this.state.difficulty}</p>\r\n                         </div>\r\n                       </div>\r\n\r\n                        <div className=\"col-4\">\r\n                       <div className=\"bg-light pt-4 pb-3 m-1\" >\r\n                        <h5>Gas Price</h5>\r\n                          <p>{this.state.gasPrice}</p>\r\n                         </div>\r\n                       </div>\r\n                   </div>\r\n\r\n                   <div className=\"row\">\r\n                   <div className=\"col-lg-12 mt-3\">\r\n                       <div className=\"card\" >\r\n                       <div className=\"card-header\">\r\n                        <h5>Latests 10 Block</h5>\r\n                        </div>\r\n                          <div className=\"card-body\">\r\n                           <table className=\"table\">\r\n                            <body>\r\n                            <center>\r\n                             <tr>\r\n                              <th scope=\"col\">#</th>\r\n                              <th scope=\"col\">Hash</th>\r\n                              <th scope=\"col\">Miner</th>\r\n                              <th scope=\"col\">Timestamp</th>\r\n                             </tr>\r\n                              {\r\n                                this.state.latestBlock.map((block,key)=>{\r\n                                  return(\r\n                                    <tr key={key}>\r\n                                      <td>{block.number} </td>\r\n                                       <td>{block.hash.substring(0,20)}...</td>\r\n                                       <td>{block.miner.substring(0,20)}...</td>\r\n                                       <td>{block.timestamp}</td>\r\n                                    </tr>\r\n                                  )\r\n                                })\r\n                              }\r\n                              </center>\r\n                            </body>\r\n                           </table>\r\n                          </div>\r\n                         </div>\r\n                       </div>\r\n                   </div>\r\n                </div>\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}